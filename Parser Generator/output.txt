int
id
,
id
,
id
,
id
;
while
(
id
relop
num
)
{
id
assign
id
addop
num
;
}
 first sets: 
E : ( int 
X : epsilon + 
Y : * epsilon 
) : ) 
T : int ( 
* : * 
int : int 
( : ( 
+ : + 

follow sets
) : + ) $ 
X : $ ) 
Y : $ ) + 
( : int ( 
E : ) $ 
int : ) $ + * 
+ : int ( 
T : $ ) + 
* : ( int 
# METHOD_BODY = STATEMENT_LIST # STATEMENT_LIST = STATEMENT | STATEMENT_LIST STATEMENT # STATEMENT = DECLARATION | IF | WHILE | ASSIGNMENT # DECLARATION = PRIMITIVE_TYPE 'id' ';' # PRIMITIVE_TYPE = 'int' | 'float' # IF = 'if' '(' EXPRESSION ')' '{' STATEMENT '}' 'else' '{' STATEMENT '}' # WHILE = 'while' '(' EXPRESSION ')' '{' STATEMENT '}' # ASSIGNMENT = 'id' '=' EXPRESSION ';' # EXPRESSION = SIMPLE_EXPRESSION | SIMPLE_EXPRESSION 'relop' SIMPLE_EXPRESSION # SIMPLE_EXPRESSION = TERM | SIGN TERM | SIMPLE_EXPRESSION 'addop' TERM # TERM = FACTOR | TERM 'mulop' FACTOR # FACTOR = 'id' | 'num' | '(' EXPRESSION ')' # SIGN = '+' | '-'  


 METHOD_BODY = STATEMENT_LIST 
METHOD_BODY
STATEMENT_LIST

 STATEMENT_LIST = STATEMENT | STATEMENT_LIST STATEMENT 
STATEMENT_LIST
STATEMENT
STATEMENT_LIST
8
STATEMENT_LIST
STATEMENT

 STATEMENT = DECLARATION | IF | WHILE | ASSIGNMENT 
STATEMENT
DECLARATION
STATEMENT
9
IF
STATEMENT
10
WHILE
STATEMENT
11
ASSIGNMENT

 DECLARATION = PRIMITIVE_TYPE 'id' ';' 
DECLARATION
PRIMITIVE_TYPE
'id'
';'

 PRIMITIVE_TYPE = 'int' | 'float' 
PRIMITIVE_TYPE
'int'
PRIMITIVE_TYPE
12
'float'

 IF = 'if' '(' EXPRESSION ')' '{' STATEMENT '}' 'else' '{' STATEMENT '}' 
IF
'if'
'('
EXPRESSION
')'
'{'
STATEMENT
'}'
'else'
'{'
STATEMENT
'}'

 WHILE = 'while' '(' EXPRESSION ')' '{' STATEMENT '}' 
WHILE
'while'
'('
EXPRESSION
')'
'{'
STATEMENT
'}'

 ASSIGNMENT = 'id' '=' EXPRESSION ';' 
ASSIGNMENT
'id'
'='
EXPRESSION
';'

 EXPRESSION = SIMPLE_EXPRESSION | SIMPLE_EXPRESSION 'relop' SIMPLE_EXPRESSION 
EXPRESSION
SIMPLE_EXPRESSION
EXPRESSION
13
SIMPLE_EXPRESSION
'relop'
SIMPLE_EXPRESSION

 SIMPLE_EXPRESSION = TERM | SIGN TERM | SIMPLE_EXPRESSION 'addop' TERM 
SIMPLE_EXPRESSION
TERM
SIMPLE_EXPRESSION
14
SIGN
TERM
SIMPLE_EXPRESSION
15
SIMPLE_EXPRESSION
'addop'
TERM

 TERM = FACTOR | TERM 'mulop' FACTOR 
TERM
FACTOR
TERM
16
TERM
'mulop'
FACTOR

 FACTOR = 'id' | 'num' | '(' EXPRESSION ')' 
FACTOR
'id'
FACTOR
17
'num'
FACTOR
18
'('
EXPRESSION
')'

 SIGN = '+' | '-'  

SIGN
=
'+'
|
'-'


